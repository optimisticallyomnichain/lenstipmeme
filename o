// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/utils/Random.sol";

interface LensToken {
    function transfer(address recipient, uint256 amount) external returns (bool);
}

interface MemeGenerator {
    function generateMeme(string memory text1, string memory text2) external returns (string memory);
}

contract LensTipBot {
    address public owner;
    LensToken public lensToken;
    MemeGenerator public memeGenerator;
    Random.RandomGenerator private randomGenerator;
    
    mapping(address => uint256) public balances;
    
    event TipSent(address indexed sender, address indexed recipient, uint256 amount, string memeUrl);
    
    constructor(address _lensTokenAddress, address _memeGeneratorAddress) {
        owner = msg.sender;
        lensToken = LensToken(_lensTokenAddress);
        memeGenerator = MemeGenerator(_memeGeneratorAddress);
        randomGenerator = new Random.RandomGenerator();
    }
    
    function tip(address _recipient, uint256 _amount, string memory _memeText1, string memory _memeText2) external {
        require(_amount > 0, "Amount must be greater than zero");
        require(balances[msg.sender] >= _amount, "Insufficient balance");
        
        balances[msg.sender] -= _amount;
        
        // Randomly double the tip amount
        if (randomGenerator.random(2) == 0) {
            _amount *= 2;
        }
        
        balances[_recipient] += _amount;
        
        lensToken.transfer(_recipient, _amount);
        
        string memory memeUrl = memeGenerator.generateMeme(_memeText1, _memeText2);
        
        emit TipSent(msg.sender, _recipient, _amount, memeUrl);
    }
    
    // ... rest of the contract remains unchanged
}
